package ${packageName}.domain;

import java.util.List;
import java.util.Objects;
import static com.fei.common.utils.BeanUtils.*;
import com.github.pagehelper.PageHelper;
import ${packageName}.common.page.PageRequest;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import javax.annotation.Resource;
import ${packageName}.dao.mapper.${ClassName}Mapper;
import ${packageName}.dao.entity.${ClassName};
import ${packageName}.model.bo.${ClassName}BO;
import ${packageName}.model.bo.condition.${ClassName}SearchConditionBO;

/**
 * @author ${author}
 * @description ${functionName}Domain层处理
 */
@Component
public class ${ClassName}Domain {

    @Resource
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    public int save${ClassName}(${ClassName}BO ${className}) {
        if (Objects.isNull(${className})) {
            return 0;
        }
        return ${className}Mapper.save${ClassName}(transform(${ClassName}.class,
            ${className}, TransformEnumType.ENUM_TO_VALUE));
    }

    /**
     * 批量新增${functionName}
     *
     * @param ${className}s ${functionName}
     * @return 结果
     */
    @Transactional(rollbackFor = Exception.class)
    public int batchSave${ClassName}(List<${ClassName}BO> ${className}s) {
        if (CollectionUtils.isEmpty(${className}s)) {
            return 0;
        }
        return ${className}Mapper.batchSave${ClassName}(batchTransform(${ClassName}.class,
            ${className}s, TransformEnumType.ENUM_TO_VALUE));
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
    public int remove${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
    @Transactional(rollbackFor = Exception.class)
    public int remove${ClassName}By${pkColumn.capJavaField}s(List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
        return ${className}Mapper.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s);
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    public int modify${ClassName}(${ClassName}BO ${className}) {
        if(Objects.isNull(${className}) || Objects.isNull(${className}.get${pkColumn.capJavaField}())) {
            return 0;
        }
        return ${className}Mapper.modify${ClassName}(transform(${ClassName}.class,
            ${className}, TransformEnumType.ENUM_TO_VALUE));
    }

    /**
     * 批量修改${functionName}
     *
     * @param ${className}s ${functionName}
     * @return 结果
     */
    @Transactional(rollbackFor = Exception.class)
    public int batchModify${ClassName}(List<${ClassName}BO> ${className}s) {
        if(CollectionUtils.isEmpty(${className}s)) {
            return 0;
        }

        if (${className}s.stream().anyMatch(${className} -> Objects.isNull(${className}.get${pkColumn.capJavaField}()))) {
            return 0;
        }

        return ${className}Mapper.batchModify${ClassName}(batchTransform(${ClassName}.class,
            ${className}s, TransformEnumType.ENUM_TO_VALUE));
    }

    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    public ${ClassName}BO get${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        ${ClassName} ${className} = ${className}Mapper.get${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField});
        return transform(${ClassName}BO.class, ${className}, TransformEnumType.VALUE_TO_ENUM);
    }

    /**
     * 查询${functionName}列表
     * 
     * @param condition 查询条件
     * @param page 分页
     * @return ${functionName}
     */
    public List<${ClassName}BO> search${ClassName}WithCondition(${ClassName}SearchConditionBO condition, PageRequest page) {
        if (Objects.isNull(page)) {
            page = PageRequest.of(1, PageRequest.DEFAULT_MAX_PAGE_SIZE);
        }
        PageHelper.startPage(page.getPageNum(), page.getPageSize(), false);

        return batchTransform(${ClassName}BO.class,
            ${className}Mapper.search${ClassName}WithCondition(transform(${ClassName}SearchCondition.class,
                    condition, TransformEnumType.ENUM_TO_VALUE)), TransformEnumType.VALUE_TO_ENUM);
    }

    /**
     * 查询${functionName}总数
     *
     * @param condition 查询条件
     * @return ${functionName}总数
     */
    public int search${ClassName}Count(${ClassName}SearchConditionBO condition) {
        return ${className}Mapper.search${ClassName}Count(transform(${ClassName}SearchCondition.class,
                condition, TransformEnumType.ENUM_TO_VALUE));
    }
}
